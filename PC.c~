/* 
*	Producer and consumer threads
*/ 

#include "pc.h"


void *ConsumerThreadFunction(void *arg);
void *QueueBalanceFunction(void *arg);


char input_file [100];
FILE* in;
size_t file_read_size = 15;

int NUM_CPUS = 4;
int running = 1;

int q[12] = {0};

struct task_queue run_queues[12];	//twelve run queues: 3 levels for each CPU. [0], [1]], [2] -> RQ0, RQ1, RQ2 for CPU1 (etc.)

int main(int argc, const char * argv[]) 
{

char input_buffer [file_read_size];
/*Create threads*/
    int res;

    pthread_t con_thread[NUM_CPUS];
    pthread_t qb_thread;
    void *thread_result;
    int CPU_number = 0;

/*Start Consumer threads*/
	for(CPU_number = 0; CPU_number<NUM_CPUS; CPU_number++) {
    		res = pthread_create(&(con_thread[CPU_number]), NULL, ConsumerThreadFunction, (void *)&CPU_number);
   	 	if (res != 0) {
        		perror("Consumer thread creation failed");
        		exit(EXIT_FAILURE);
		}
		sleep(1);
	}

/*Start queue balancer thread*/
	res = pthread_create(&(qb_thread), NULL, QueueBalanceFunction, NULL);
	if (res != 0) {
        		perror("Consumer thread creation failed");
        		exit(EXIT_FAILURE);
		}

	//allow time for consumers to get ready
	sleep(1);

/*Producer (main) thread*/

	/* get input file name */
	strcpy(input_file, "input.txt");	//use defult file input.txt


	/* open file */
	printf("Producer opening file: %s\n", input_file);
	
	in = fopen(input_file, "r");

	if(in == NULL)
	{
		printf("File '%s' does not exist in this location.\n Closing producer.\n", input_file);
		return 0;
	}


	/* set up/connect to semaphores	*/
	union semun sem_union;
	int i;
	int key = 1234;
	
	for(i=0; i<12; i++)
	{
		Q_sem[i] = semget((key_t) key, 1, 0666 | IPC_CREAT);
		sem_union.val = 0;
		semctl(Q_sem[0], 0, SETVAL, sem_union);
		key++;
	}

	/*
		Q_sem[1] = semget((key_t) 2134, 1, 0666 | IPC_CREAT);
		sem_union.val = 0;
		semctl(Q_sem[1], 0, SETVAL, sem_union);

		Q_sem[2] = semget((key_t) 3124, 1, 0666 | IPC_CREAT);
		sem_union.val = 0;
		semctl(Q_sem[2], 0, SETVAL, sem_union);

		Q_sem[3] = semget((key_t) 4123, 1, 0666 | IPC_CREAT);
		sem_union.val = 0;
		semctl(Q_sem[3], 0, SETVAL, sem_union);
*/

	for(i = 0; i < 4; i++)
		sem_init(&CPU_sem[i], 0, 0);


	int current_CPU = 0;
	int k = 0;
	int current_queue;
	int value_read = 0;
	int sem_val;
	/* read from file into input buffer */
	for(i = 0; i<20; i++)			//read 20 "processes" from input file
	{
			//read the "process information" from the file and add to one of the queues

			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("sched_type = %d\n", k, value_read);

			//scheduling type determines which queue (RQ0, RQ1, or RQ2) for the current CPU the process goes into
			if(value_read == 2)				//if scheduling type = SCHED_NORMAL
				current_queue = current_CPU + 1;	//put into RQ1 for current CPU
			else						//if scheduling type = SCHED_FIFO or SCHED_RR
				current_queue = current_CPU;		//put into RQ0 for current CPU

			run_queues[current_queue].q[k].sched_type = value_read;

			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("%d pid = %d\n", k, value_read);
			run_queues[current_queue].q[k].pid = value_read;
			
			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("%d static_prio = %d\n", k, value_read);
			run_queues[current_queue].q[k].static_prio = value_read;
			
			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("%d prio = %d\n", k, value_read);
			run_queues[current_queue].q[k].prio = value_read;
			
			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("%d ex_time = %d\n", k, value_read);
			run_queues[current_queue].q[k].ex_time = value_read;
			
			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("%d time_slice = %d\n", k, value_read);
			run_queues[current_queue].q[k].time_slice = value_read;
			
			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("%d accu_time_slice = %d\n", k, value_read);
			run_queues[current_queue].q[k].accu_time_slice = value_read;
			
			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("%d last_cpu = %d\n", k, value_read);
			run_queues[current_queue].q[k].last_cpu = value_read;
			
			fgets(input_buffer, 10, in);
			value_read = atoi(input_buffer);
			//printf("expected_st = %d\n", k, value_read);
			run_queues[current_queue].q[k].expected_st = value_read;
			
		
			fgets(input_buffer, 5, in);	//ignore space between set
			
			//signal semaphore for queue
			sem_s(Q_sem[current_queue]);
			//sem_post(&(CPU_sem[j]));
			sem_getvalue(&(CPU_sem[current_queue]), &sem_val);
			q[current_queue]++;
			//printf("**Signalling Queue %d. Value is now %d\n", j, q[j]);
			
			//move to next queue or roll-over to first queue
			current_CPU++;
			//printf("\n\n");
			if(current_CPU>3) {
				current_CPU = 0;
				k++;		//increment index in queue
				if(k>99)
					k=0;	//roll-over for circular buffer
			}
	}

	fclose(in);
	sleep(8);
	
	printf("Producer done, wating for CPUs to finish.\n");
	for(CPU_number = 0; CPU_number<NUM_CPUS; CPU_number++) {
    		res = pthread_join(con_thread[CPU_number], &thread_result);
   	 	if (res != 0) {
        		perror("CPU thread join falied.");
        		exit(EXIT_FAILURE);
		}
		sleep(1);
	}
	
	running = 0;
	res = pthread_join(qb_thread, &thread_result);
   	 	if (res != 0) {
        		perror("Thread join falied.");
        		exit(EXIT_FAILURE);
		}
	printf("All threads complete.\n");
	exit(EXIT_SUCCESS);
}



void *ConsumerThreadFunction(void *arg)
{
	int CPUnumber = *(int *)arg;
	printf("CPU %d thread started.\n", CPUnumber);
    sleep(10);

	union semun sem_union;
	int i;
	int sem_val;

	for(i=0;i<5;i++)
	{
		q[CPUnumber]--;
		sem_getvalue(&(CPU_sem[i]), &sem_val);
		printf("Waiting on semaphore Q%d, value is currently %d.\n", CPUnumber, q[CPUnumber]);
		sem_w(Q_sem[CPUnumber]);
		//sem_wait(&(CPU_sem[CPUnumber]));
		//printf("CPU %d : %d from queue in queue position %d.\n", CPUnumber, run_queues[CPUnumber].q[i].pid, i);
		//print process information
		printf("CPU %d: process PID %d slecected. SPis %d. Time slice allocated %d, time slice used %d.\n", CPUnumber, run_queues[CPUnumber].q[i].pid, run_queues[CPUnumber].q[i].static_prio, run_queues[CPUnumber].q[i].time_slice, run_queues[CPUnumber].q[i].accu_time_slice);
	
		//calculate time quantum
		if(run_queues[CPUnumber].q[i].static_prio > 120)
			run_queues[CPUnumber].q[i].time_slice = (140 - run_queues[CPUnumber].q[i].static_prio)*20;
		else
			run_queues[CPUnumber].q[i].time_slice = (140 - run_queues[CPUnumber].q[i].static_prio)*5;
		
		
		printf("Process PID %d time quantum calculated to be %d.\n", run_queues[CPUnumber].q[i].pid, run_queues[CPUnumber].q[i].time_slice);
		//"execute" process for time quantum
		usleep(run_queues[CPUnumber].q[i].time_slice);
		
		//update process
		run_queues[CPUnumber].q[i].accu_time_slice += run_queues[CPUnumber].q[i].time_slice;
		run_queues[CPUnumber].q[i].last_cpu = CPUnumber;
	}
	
	printf("CPU %d completed execution of run queue. Exiting.\n\n", CPUnumber);
	pthread_exit("Thread complete.");
}


void *QueueBalanceFunction(void *arg)
{
		printf("Queue balancer started.\n");
		
	/*Queue balancer checks the number of processes in each of the run queues every 3 seconds and balances them as needed*/
		while(running)
		{
			sleep(3);
			
			//check number of items in each queue
			
			//if(q1 == q2 == q3 == q4)
				printf("Run queues balanced.\n");
			//else
				//balance queues
				//printf("Run queues have been balanced.\n");
		}
		printf("Queue balance thread exiting.\n");
		pthread_exit("Thread complete.");
}

